<?xml version="1.0" ?>
<SmellBaseline>
    <ManuallySuppressedIssues/>
    <CurrentIssues>
        <ID>AvoidReferentialEquality:PolicyFunctions.kt$it.code === condition.code</ID>
        <ID>DoubleMutabilityForCollection:HdcCase.kt$HdcCase$var curfewTimes: MutableList&lt;HdcCurfewTimes&gt;</ID>
        <ID>ForbiddenComment:HdcService.kt$HdcService.HdcStatuses$* For CA: * Always show started cases regardless of
            HDC status. * TODO: will need to fix when we start to show prospective HDC cases in caselist * If licence
            hasn't been started, only show !approved licences.
        </ID>
        <ID>ForbiddenComment:HdcService.kt$HdcService.HdcStatuses$* For COM: * If licence hasn't been started base on
            whether licence is approved. * TODO: will need to fix when we start to show prospective HDC cases in
            caselist * If licence has been started then show when (approved and HDC) or (!approved and !hdc)
        </ID>
        <ID>ForbiddenVoid:DeliusApiClient.kt$DeliusApiClient$Void</ID>
        <ID>HasPlatformType:ExclusionZonePdfExtract.kt$ExclusionZonePdfExtractBuilder.Companion$val log =
            LoggerFactory.getLogger(this::class.java)
        </ID>
        <ID>HasPlatformType:ResponseUtils.kt$ResponseUtils$fun &lt;T&gt; Mono&lt;T&gt;.coerce404ToEmptyOrThrow()</ID>
        <ID>HasPlatformType:ResponseUtils.kt$ResponseUtils$fun &lt;T&gt; Mono&lt;T&gt;.propagateAny404(message: () -&gt;
            String)
        </ID>
        <ID>HasPlatformType:ResponseUtils.kt$ResponseUtils$fun
            WebClient.ResponseSpec.rethrowAnyHttpErrorWithContext(message: (response: ClientResponse, body: String?) -&gt;
            String)
        </ID>
        <ID>LargeClass:LicenceController.kt$LicenceController</ID>
        <ID>LargeClass:LicenceService.kt$LicenceService</ID>
        <ID>LongMethod:CrdLicence.kt$CrdLicence$override fun toString(): String</ID>
        <ID>LongMethod:HardStopLicence.kt$HardStopLicence$override fun toString(): String</ID>
        <ID>LongMethod:HdcLicence.kt$HdcLicence$fun copy( id: Long? = this.id, typeCode: LicenceType = this.typeCode,
            version: String? = this.version, statusCode: LicenceStatus = this.statusCode, nomsId: String? = this.nomsId,
            bookingNo: String? = this.bookingNo, bookingId: Long? = this.bookingId, crn: String? = this.crn, pnc:
            String? = this.pnc, cro: String? = this.cro, prisonCode: String? = this.prisonCode, prisonDescription:
            String? = this.prisonDescription, prisonTelephone: String? = this.prisonTelephone, forename: String? =
            this.forename, middleNames: String? = this.middleNames, surname: String? = this.surname, dateOfBirth:
            LocalDate? = this.dateOfBirth, conditionalReleaseDate: LocalDate? = this.conditionalReleaseDate,
            actualReleaseDate: LocalDate? = this.actualReleaseDate, sentenceStartDate: LocalDate? =
            this.sentenceStartDate, sentenceEndDate: LocalDate? = this.sentenceEndDate, licenceStartDate: LocalDate? =
            this.licenceStartDate, licenceExpiryDate: LocalDate? = this.licenceExpiryDate, licenceActivatedDate:
            LocalDateTime? = this.licenceActivatedDate, homeDetentionCurfewActualDate: LocalDate? =
            this.homeDetentionCurfewActualDate, homeDetentionCurfewEndDate: LocalDate? =
            this.homeDetentionCurfewEndDate, topupSupervisionStartDate: LocalDate? = this.topupSupervisionStartDate,
            topupSupervisionExpiryDate: LocalDate? = this.topupSupervisionExpiryDate, postRecallReleaseDate: LocalDate?
            = this.postRecallReleaseDate, probationAreaCode: String? = this.probationAreaCode, probationAreaDescription:
            String? = this.probationAreaDescription, probationPduCode: String? = this.probationPduCode,
            probationPduDescription: String? = this.probationPduDescription, probationLauCode: String? =
            this.probationLauCode, probationLauDescription: String? = this.probationLauDescription, probationTeamCode:
            String? = this.probationTeamCode, probationTeamDescription: String? = this.probationTeamDescription,
            appointment: Appointment? = AppointmentMapper.copy(this.appointment), approvedDate: LocalDateTime? =
            this.approvedDate, approvedByUsername: String? = this.approvedByUsername, approvedByName: String? =
            this.approvedByName, supersededDate: LocalDateTime? = this.supersededDate, submittedDate: LocalDateTime? =
            this.submittedDate, dateCreated: LocalDateTime? = this.dateCreated, dateLastUpdated: LocalDateTime? =
            this.dateLastUpdated, updatedByUsername: String? = this.updatedByUsername, standardConditions: List&lt;StandardCondition&gt;
            = this.standardConditions, additionalConditions: List&lt;AdditionalCondition&gt; =
            this.additionalConditions, bespokeConditions: List&lt;BespokeCondition&gt; = this.bespokeConditions,
            responsibleCom: CommunityOffenderManager = this.responsibleCom, curfewTimes: List&lt;HdcCurfewTimes&gt; =
            this.curfewTimes, submittedBy: CommunityOffenderManager? = this.submittedBy, createdBy:
            CommunityOffenderManager? = this.createdBy, versionOfId: Long? = this.versionOfId, licenceVersion: String? =
            this.licenceVersion, updatedBy: Staff? = this.updatedBy, curfewAddress: HdcCurfewAddress? =
            this.curfewAddress, electronicMonitoringProvider: ElectronicMonitoringProvider? =
            this.electronicMonitoringProvider, ): HdcLicence
        </ID>
        <ID>LongMethod:HdcLicence.kt$HdcLicence$override fun toString(): String</ID>
        <ID>LongMethod:HdcVariationLicence.kt$HdcVariationLicence$fun copy( id: Long? = this.id, typeCode: LicenceType =
            this.typeCode, version: String? = this.version, statusCode: LicenceStatus = this.statusCode, nomsId: String?
            = this.nomsId, bookingNo: String? = this.bookingNo, bookingId: Long? = this.bookingId, crn: String? =
            this.crn, pnc: String? = this.pnc, cro: String? = this.cro, prisonCode: String? = this.prisonCode,
            prisonDescription: String? = this.prisonDescription, prisonTelephone: String? = this.prisonTelephone,
            forename: String? = this.forename, middleNames: String? = this.middleNames, surname: String? = this.surname,
            dateOfBirth: LocalDate? = this.dateOfBirth, conditionalReleaseDate: LocalDate? =
            this.conditionalReleaseDate, actualReleaseDate: LocalDate? = this.actualReleaseDate, sentenceStartDate:
            LocalDate? = this.sentenceStartDate, sentenceEndDate: LocalDate? = this.sentenceEndDate, licenceStartDate:
            LocalDate? = this.licenceStartDate, licenceExpiryDate: LocalDate? = this.licenceExpiryDate,
            licenceActivatedDate: LocalDateTime? = this.licenceActivatedDate, homeDetentionCurfewActualDate: LocalDate?
            = this.homeDetentionCurfewActualDate, homeDetentionCurfewEndDate: LocalDate? =
            this.homeDetentionCurfewEndDate, topupSupervisionStartDate: LocalDate? = this.topupSupervisionStartDate,
            topupSupervisionExpiryDate: LocalDate? = this.topupSupervisionExpiryDate, postRecallReleaseDate: LocalDate?
            = this.postRecallReleaseDate, probationAreaCode: String? = this.probationAreaCode, probationAreaDescription:
            String? = this.probationAreaDescription, probationPduCode: String? = this.probationPduCode,
            probationPduDescription: String? = this.probationPduDescription, probationLauCode: String? =
            this.probationLauCode, probationLauDescription: String? = this.probationLauDescription, probationTeamCode:
            String? = this.probationTeamCode, probationTeamDescription: String? = this.probationTeamDescription,
            appointment: Appointment? = AppointmentMapper.copy(this.appointment), spoDiscussion: String? =
            this.spoDiscussion, vloDiscussion: String? = this.vloDiscussion, approvedDate: LocalDateTime? =
            this.approvedDate, approvedByUsername: String? = this.approvedByUsername, approvedByName: String? =
            this.approvedByName, supersededDate: LocalDateTime? = this.supersededDate, submittedDate: LocalDateTime? =
            this.submittedDate, dateCreated: LocalDateTime? = this.dateCreated, dateLastUpdated: LocalDateTime? =
            this.dateLastUpdated, updatedByUsername: String? = this.updatedByUsername, variationOfId: Long? =
            this.variationOfId, licenceVersion: String? = this.licenceVersion, standardConditions: List&lt;StandardCondition&gt;
            = this.standardConditions, additionalConditions: List&lt;AdditionalCondition&gt; =
            this.additionalConditions, bespokeConditions: List&lt;BespokeCondition&gt; = this.bespokeConditions,
            responsibleCom: CommunityOffenderManager = this.responsibleCom, curfewTimes: MutableList&lt;HdcCurfewTimes&gt;
            = this.curfewTimes.toMutableList(), submittedBy: CommunityOffenderManager? = this.submittedBy, createdBy:
            CommunityOffenderManager? = this.createdBy, updatedBy: Staff? = this.updatedBy, curfewAddress:
            HdcCurfewAddress? = this.curfewAddress, ): HdcVariationLicence
        </ID>
        <ID>LongMethod:HdcVariationLicence.kt$HdcVariationLicence$override fun toString(): String</ID>
        <ID>LongMethod:LicenceOverrideService.kt$LicenceOverrideService$@Transactional fun changeDates(licenceId: Long,
            request: OverrideLicenceDatesRequest)
        </ID>
        <ID>LongMethod:LicenceService.kt$LicenceService$@Transactional fun submitLicence(licenceId: Long, notifyRequest:
            List&lt;NotifyRequest&gt;?)
        </ID>
        <ID>LongMethod:LicenceService.kt$LicenceService$private fun populateCopyAndAudit( kind: LicenceKind, licence:
            EntityLicence, licenceCopy: EntityLicence, creator: CommunityOffenderManager, ): EntityLicence
        </ID>
        <ID>LongMethod:LicenceService.kt$LicenceService$private fun updateLicenceStatus(licenceEntity: EntityLicence,
            request: StatusUpdateRequest)
        </ID>
        <ID>LongMethod:PrrdLicence.kt$PrrdLicence$override fun toString(): String</ID>
        <ID>LongMethod:TimeServedLicence.kt$TimeServedLicence$override fun toString(): String</ID>
        <ID>LongMethod:ToModelTransformers.kt$@TimeServedConsiderations("Is COM required for variation, if so the
            responsibleCOM would never be null") fun toVariation( licence: VariationLicence, earliestReleaseDate:
            LocalDate?, isEligibleForEarlyRelease: Boolean, conditionPolicyData: Map&lt;String, ConditionPolicyData&gt;,
            ): ModelVariationLicence
        </ID>
        <ID>LongMethod:ToModelTransformers.kt$fun toCrd( licence: CrdLicence, earliestReleaseDate: LocalDate?,
            isEligibleForEarlyRelease: Boolean, hardStopDate: LocalDate?, hardStopWarningDate: LocalDate?,
            isInHardStopPeriod: Boolean, isDueToBeReleasedInTheNextTwoWorkingDays: Boolean, conditionPolicyData: Map&lt;String,
            ConditionPolicyData&gt;, )
        </ID>
        <ID>LongMethod:ToModelTransformers.kt$fun toHardstop( licence: HardStopLicence, earliestReleaseDate: LocalDate?,
            isEligibleForEarlyRelease: Boolean, hardStopDate: LocalDate?, hardStopWarningDate: LocalDate?,
            isInHardStopPeriod: Boolean, isDueToBeReleasedInTheNextTwoWorkingDays: Boolean, conditionPolicyData: Map&lt;String,
            ConditionPolicyData&gt;, )
        </ID>
        <ID>LongMethod:ToModelTransformers.kt$fun toHdc( licence: HdcLicence, earliestReleaseDate: LocalDate?,
            isEligibleForEarlyRelease: Boolean, hardStopDate: LocalDate?, hardStopWarningDate: LocalDate?,
            isInHardStopPeriod: Boolean, isDueToBeReleasedInTheNextTwoWorkingDays: Boolean, conditionPolicyData: Map&lt;String,
            ConditionPolicyData&gt;, )
        </ID>
        <ID>LongMethod:ToModelTransformers.kt$fun toHdcVariation( licence: HdcVariationLicence, earliestReleaseDate:
            LocalDate?, isEligibleForEarlyRelease: Boolean, conditionPolicyData: Map&lt;String, ConditionPolicyData&gt;,
            )
        </ID>
        <ID>LongMethod:ToModelTransformers.kt$fun toPrrd( licence: PrrdLicence, earliestReleaseDate: LocalDate?,
            isEligibleForEarlyRelease: Boolean, hardStopDate: LocalDate?, hardStopWarningDate: LocalDate?,
            isInHardStopPeriod: Boolean, isDueToBeReleasedInTheNextTwoWorkingDays: Boolean, conditionPolicyData: Map&lt;String,
            ConditionPolicyData&gt;, )
        </ID>
        <ID>LongMethod:VariationLicence.kt$VariationLicence$fun copy( id: Long? = this.id, typeCode: LicenceType =
            this.typeCode, version: String? = this.version, statusCode: LicenceStatus = this.statusCode, nomsId: String?
            = this.nomsId, bookingNo: String? = this.bookingNo, bookingId: Long? = this.bookingId, crn: String? =
            this.crn, pnc: String? = this.pnc, cro: String? = this.cro, prisonCode: String? = this.prisonCode,
            prisonDescription: String? = this.prisonDescription, prisonTelephone: String? = this.prisonTelephone,
            forename: String? = this.forename, middleNames: String? = this.middleNames, surname: String? = this.surname,
            dateOfBirth: LocalDate? = this.dateOfBirth, conditionalReleaseDate: LocalDate? =
            this.conditionalReleaseDate, actualReleaseDate: LocalDate? = this.actualReleaseDate, sentenceStartDate:
            LocalDate? = this.sentenceStartDate, sentenceEndDate: LocalDate? = this.sentenceEndDate, licenceStartDate:
            LocalDate? = this.licenceStartDate, licenceExpiryDate: LocalDate? = this.licenceExpiryDate,
            licenceActivatedDate: LocalDateTime? = this.licenceActivatedDate, topupSupervisionStartDate: LocalDate? =
            this.topupSupervisionStartDate, topupSupervisionExpiryDate: LocalDate? = this.topupSupervisionExpiryDate,
            postRecallReleaseDate: LocalDate? = this.postRecallReleaseDate, probationAreaCode: String? =
            this.probationAreaCode, probationAreaDescription: String? = this.probationAreaDescription, probationPduCode:
            String? = this.probationPduCode, probationPduDescription: String? = this.probationPduDescription,
            probationLauCode: String? = this.probationLauCode, probationLauDescription: String? =
            this.probationLauDescription, probationTeamCode: String? = this.probationTeamCode, probationTeamDescription:
            String? = this.probationTeamDescription, appointment: Appointment? =
            AppointmentMapper.copy(this.appointment), spoDiscussion: String? = this.spoDiscussion, vloDiscussion:
            String? = this.vloDiscussion, approvedDate: LocalDateTime? = this.approvedDate, approvedByUsername: String?
            = this.approvedByUsername, approvedByName: String? = this.approvedByName, supersededDate: LocalDateTime? =
            this.supersededDate, submittedDate: LocalDateTime? = this.submittedDate, dateCreated: LocalDateTime? =
            this.dateCreated, dateLastUpdated: LocalDateTime? = this.dateLastUpdated, updatedByUsername: String? =
            this.updatedByUsername, variationOfId: Long? = this.variationOfId, licenceVersion: String? =
            this.licenceVersion, standardConditions: List&lt;StandardCondition&gt; = this.standardConditions,
            additionalConditions: List&lt;AdditionalCondition&gt; = this.additionalConditions, bespokeConditions: List&lt;BespokeCondition&gt;
            = this.bespokeConditions, responsibleCom: CommunityOffenderManager = this.responsibleCom, submittedBy:
            CommunityOffenderManager? = this.submittedBy, createdBy: CommunityOffenderManager? = this.createdBy,
            updatedBy: Staff? = this.updatedBy, ): VariationLicence
        </ID>
        <ID>LongMethod:VariationLicence.kt$VariationLicence$override fun toString(): String</ID>
        <ID>LongParameterList:Address.kt$Address$( id: Long? = null, @Column(nullable = false, unique = true) val
            reference: String, // Unique Property Reference Number @Column(nullable = true, unique = false) var uprn:
            String? = null, @Column(name = "first_line", nullable = false) var firstLine: String, @Column(name =
            "second_line") var secondLine: String? = null, @Column(name = "town_or_city", nullable = false) var
            townOrCity: String, @Column var county: String? = null, @Column(nullable = false) var postcode: String,
            @Enumerated(EnumType.STRING) @Column(name = "source", nullable = false) var source: AddressSource, val
            createdTimestamp: LocalDateTime = LocalDateTime.now(), var lastUpdatedTimestamp: LocalDateTime =
            LocalDateTime.now(), )
        </ID>
        <ID>LongParameterList:Appointment.kt$Appointment$( id: Long? = null, @Enumerated(EnumType.STRING) var
            personType: AppointmentPersonType? = null, var person: String? = null, @Enumerated(EnumType.STRING) var
            timeType: AppointmentTimeType? = null, var time: LocalDateTime? = null, var telephoneContactNumber: String?
            = null, var alternativeTelephoneContactNumber: String? = null, var addressText: String? = null, @OneToOne(
            cascade = [CascadeType.ALL], fetch = FetchType.LAZY, orphanRemoval = true, ) @JoinTable( name =
            "APPOINTMENT_ADDRESS", joinColumns = [JoinColumn(name = "appointment_id")], inverseJoinColumns =
            [JoinColumn(name = "address_id")], uniqueConstraints = [UniqueConstraint(columnNames = ["appointment_id",
            "address_id"])], ) var address: Address? = null, var dateCreated: LocalDateTime? = LocalDateTime.now(), var
            dateLastUpdated: LocalDateTime? = null, )
        </ID>
        <ID>LongParameterList:CaCaseloadService.kt$CaCaseloadService$( private val caseloadService: CaseloadService,
            private val licenceService: LicenceService, private val hdcService: HdcService, private val
            eligibilityService: EligibilityService, private val clock: Clock, private val deliusApiClient:
            DeliusApiClient, private val prisonerSearchApiClient: PrisonerSearchApiClient, private val
            releaseDateService: ReleaseDateService, private val releaseDateLabelFactory: ReleaseDateLabelFactory, )
        </ID>
        <ID>LongParameterList:ComCaseloadSearchService.kt$ComCaseloadSearchService$( private val licenceRepository:
            LicenceRepository, private val deliusApiClient: DeliusApiClient, private val prisonerSearchApiClient:
            PrisonerSearchApiClient, private val hdcService: HdcService, private val eligibilityService:
            EligibilityService, private val releaseDateService: ReleaseDateService, private val clock: Clock, private
            val releaseDateLabelFactory: ReleaseDateLabelFactory, )
        </ID>
        <ID>LongParameterList:ComCreateCaseloadService.kt$ComCreateCaseloadService$( private val caseloadService:
            CaseloadService, private val deliusApiClient: DeliusApiClient, private val licenceService: LicenceService,
            private val eligibilityService: EligibilityService, private val hdcService: HdcService, private val
            licenceCreationService: LicenceCreationService, private val releaseDateService: ReleaseDateService, )
        </ID>
        <ID>LongParameterList:CommunityOffenderManager.kt$CommunityOffenderManager$( id: Long? = null, var
            staffIdentifier: Long, username: String, email: String?, firstName: String?, lastName: String?,
            lastUpdatedTimestamp: LocalDateTime? = null, )
        </ID>
        <ID>LongParameterList:CommunityOffenderManager.kt$CommunityOffenderManager$( id: Long? = this.id,
            staffIdentifier: Long = this.staffIdentifier, username: String = this.username, email: String? = this.email,
            firstName: String? = this.firstName, lastName: String? = this.lastName, lastUpdatedTimestamp: LocalDateTime?
            = this.lastUpdatedTimestamp, )
        </ID>
        <ID>LongParameterList:CrdLicence.kt$CrdLicence$( id: Long? = null, typeCode: LicenceType, version: String? =
            null, statusCode: LicenceStatus = LicenceStatus.IN_PROGRESS, nomsId: String? = null, bookingNo: String? =
            null, bookingId: Long? = null, crn: String? = null, pnc: String? = null, cro: String? = null, prisonCode:
            String? = null, prisonDescription: String? = null, prisonTelephone: String? = null, forename: String? =
            null, middleNames: String? = null, surname: String? = null, dateOfBirth: LocalDate? = null,
            conditionalReleaseDate: LocalDate? = null, actualReleaseDate: LocalDate? = null, sentenceStartDate:
            LocalDate? = null, sentenceEndDate: LocalDate? = null, licenceStartDate: LocalDate? = null,
            licenceExpiryDate: LocalDate? = null, licenceActivatedDate: LocalDateTime? = null,
            topupSupervisionStartDate: LocalDate? = null, topupSupervisionExpiryDate: LocalDate? = null,
            postRecallReleaseDate: LocalDate? = null, probationAreaCode: String? = null, probationAreaDescription:
            String? = null, probationPduCode: String? = null, probationPduDescription: String? = null, probationLauCode:
            String? = null, probationLauDescription: String? = null, probationTeamCode: String? = null,
            probationTeamDescription: String? = null, appointment: Appointment? = null, approvedDate: LocalDateTime? =
            null, approvedByUsername: String? = null, approvedByName: String? = null, supersededDate: LocalDateTime? =
            null, submittedDate: LocalDateTime? = null, dateCreated: LocalDateTime? = null, dateLastUpdated:
            LocalDateTime? = null, updatedByUsername: String? = null, licenceVersion: String? = "1.0",
            standardConditions: List&lt;StandardCondition&gt; = emptyList(), additionalConditions: List&lt;AdditionalCondition&gt;
            = emptyList(), bespokeConditions: List&lt;BespokeCondition&gt; = emptyList(), updatedBy: Staff? = null,
            @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "submitted_by_com_id", nullable = true) var
            submittedBy: CommunityOffenderManager? = null, @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name =
            "created_by_com_id", nullable = false) var createdBy: CommunityOffenderManager? = null, @OneToOne( mappedBy
            = "licence", cascade = [CascadeType.ALL], fetch = FetchType.EAGER, optional = true, orphanRemoval = true, )
            override var electronicMonitoringProvider: ElectronicMonitoringProvider? = null, override var versionOfId:
            Long? = null, @ManyToOne(fetch = FetchType.EAGER) @JoinColumn(name = "responsible_com_id", nullable = false)
            override var responsibleCom: CommunityOffenderManager, )
        </ID>
        <ID>LongParameterList:CrdLicence.kt$CrdLicence$( id: Long? = this.id, typeCode: LicenceType = this.typeCode,
            version: String? = this.version, statusCode: LicenceStatus = this.statusCode, nomsId: String? = this.nomsId,
            bookingNo: String? = this.bookingNo, bookingId: Long? = this.bookingId, crn: String? = this.crn, pnc:
            String? = this.pnc, cro: String? = this.cro, prisonCode: String? = this.prisonCode, prisonDescription:
            String? = this.prisonDescription, prisonTelephone: String? = this.prisonTelephone, forename: String? =
            this.forename, middleNames: String? = this.middleNames, surname: String? = this.surname, dateOfBirth:
            LocalDate? = this.dateOfBirth, conditionalReleaseDate: LocalDate? = this.conditionalReleaseDate,
            actualReleaseDate: LocalDate? = this.actualReleaseDate, sentenceStartDate: LocalDate? =
            this.sentenceStartDate, sentenceEndDate: LocalDate? = this.sentenceEndDate, licenceStartDate: LocalDate? =
            this.licenceStartDate, licenceExpiryDate: LocalDate? = this.licenceExpiryDate, licenceActivatedDate:
            LocalDateTime? = this.licenceActivatedDate, topupSupervisionStartDate: LocalDate? =
            this.topupSupervisionStartDate, topupSupervisionExpiryDate: LocalDate? = this.topupSupervisionExpiryDate,
            postRecallReleaseDate: LocalDate? = this.postRecallReleaseDate, probationAreaCode: String? =
            this.probationAreaCode, probationAreaDescription: String? = this.probationAreaDescription, probationPduCode:
            String? = this.probationPduCode, probationPduDescription: String? = this.probationPduDescription,
            probationLauCode: String? = this.probationLauCode, probationLauDescription: String? =
            this.probationLauDescription, probationTeamCode: String? = this.probationTeamCode, probationTeamDescription:
            String? = this.probationTeamDescription, appointment: Appointment? =
            AppointmentMapper.copy(this.appointment), approvedDate: LocalDateTime? = this.approvedDate,
            approvedByUsername: String? = this.approvedByUsername, approvedByName: String? = this.approvedByName,
            supersededDate: LocalDateTime? = this.supersededDate, submittedDate: LocalDateTime? = this.submittedDate,
            dateCreated: LocalDateTime? = this.dateCreated, dateLastUpdated: LocalDateTime? = this.dateLastUpdated,
            updatedByUsername: String? = this.updatedByUsername, standardConditions: List&lt;StandardCondition&gt; =
            this.standardConditions, additionalConditions: List&lt;AdditionalCondition&gt; = this.additionalConditions,
            bespokeConditions: List&lt;BespokeCondition&gt; = this.bespokeConditions, responsibleCom:
            CommunityOffenderManager = this.responsibleCom, submittedBy: CommunityOffenderManager? = this.submittedBy,
            createdBy: CommunityOffenderManager? = this.createdBy, versionOfId: Long? = this.versionOfId,
            licenceVersion: String? = this.licenceVersion, updatedBy: Staff? = this.updatedBy,
            electronicMonitoringProvider: ElectronicMonitoringProvider? = this.electronicMonitoringProvider, )
        </ID>
    </CurrentIssues>
</SmellBaseline>
