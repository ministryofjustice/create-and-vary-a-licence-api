version: 2.1
orbs:
  hmpps: ministryofjustice/hmpps@11
  codecov: codecov/codecov@3.2.0
parameters:
  releases-slack-channel:
    type: string
    default: the_elephants_devs
  java-version:
    type: string
    default: "21.0"
  localstack-version:
    type: string
    default: "3.0.2"
  postgres-version:
    type: string
    default: "17.5"
jobs:
  validate:
    executor:
      name: hmpps/java
      tag: << pipeline.parameters.java-version >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew -Dorg.gradle.jvmargs="--illegal-access=permit" -Dkotlin.daemon.jvm.options="--illegal-access=permit" check
      - codecov/upload:
          file: build/reports/jacoco/test/jacocoTestReport.xml
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - store_artifacts:
          path: build/reports/jacoco
integration-test:
  docker:
    - image: cimg/postgres:17.5.0
      environment:
        POSTGRES_DB: create-and-vary-a-licence-db
        POSTGRES_USER: cvl
        POSTGRES_PASSWORD: cvl
        PGDATA: /dev/shm/pgdata  # RAM disk
  environment:
    LOCALSTACK_VERSION: << pipeline.parameters.localstack-version >>
    LOCALSTACK_SERVICES: "sqs,sns"
  steps:
    - checkout

    - restore_cache:
        keys:
          - gradle-cache-{{ checksum "build.gradle.kts" }}
          - gradle-cache-

    - setup_remote_docker:
        version: 20.10.18

    - run:
        name: Prepare PGDATA in RAM
        command: |
          sudo mkdir -p $PGDATA
          sudo chown -R circleci $PGDATA

    - run:
        name: Create Docker network
        command: docker network create test-net

    - run:
        name: Start LocalStack
        command: |
          docker run -d \
            --rm \
            --name localstack \
            --network test-net \
            -e SERVICES=$LOCALSTACK_SERVICES \
            -e DEFAULT_REGION=eu-west-2 \
            -p 4566:4566 \
            localstack/localstack:$LOCALSTACK_VERSION

    - run:
        name: Wait for services
        command: |
          for i in {1..30}; do pg_isready -h localhost -p 5432 && break; sleep 1; done
          for i in {1..30}; do nc -z localhost 4566 && break; sleep 1; done

    - run:
        name: Run integration tests
        command: ./gradlew -Dorg.gradle.jvmargs="--illegal-access=permit" -Dkotlin.daemon.jvm.options="--illegal-access=permit" integrationTest

    - save_cache:
        paths:
          - ~/.gradle
        key: gradle-{{ checksum "build.gradle.kts" }}

    - store_test_results:
        path: build/test-results

    - store_artifacts:
        path: build/reports/tests
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - hmpps/database_schema_report:
            jdk_tag: << pipeline.parameters.java-version >>
            localstack_tag: << pipeline.parameters.localstack-version >>
            postgres_tag: << pipeline.parameters.postgres-version >>
            database_name: create-and-vary-a-licence-db
            user: cvl
            password: cvl
            port: 5433
            initialise_database: ./gradlew -Dorg.gradle.jvmargs="--illegal-access=permit" -Dkotlin.daemon.jvm.options="--illegal-access=permit" initialiseDatabase
            filters:
              branches:
                only:
                  - main
      - validate:
          filters:
            tags:
              ignore: /.*/
      - integration-test:
          filters:
            tags:
              ignore: /.*/
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
                - /test.*/
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - integration-test
            - build_docker
            - helm_lint
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          context:
            - hmpps-common-vars
            - create-and-vary-a-licence-api-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - create-and-vary-a-licence-api-prod
          requires:
            - request-prod-approval
      - hmpps/deploy_env:
          name: deploy_test1
          env: "test1"
          context:
            - hmpps-common-vars
            - create-and-vary-a-licence-test1
          requires:
            - build_docker
          filters:
            branches:
              only:
                - test1
      - hmpps/deploy_env:
          name: deploy_test2
          env: "test2"
          context:
            - hmpps-common-vars
            - create-and-vary-a-licence-test2
          requires:
            - build_docker
          filters:
            branches:
              only:
                - main
