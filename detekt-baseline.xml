<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:Licence.kt$Licence$override fun equals(other: Any?): Boolean</ID>
    <ID>CyclomaticComplexMethod:LicenceService.kt$LicenceService$private fun copyLicenceAndConditions(kind: LicenceKind, licence: EntityLicence): EntityLicence</ID>
    <ID>FunctionNaming:JPASpecificationDSL.kt$fun &lt;T, R : Any&gt; KProperty1&lt;T, R?&gt;.`in`(values: Collection&lt;R&gt;): Specification&lt;T&gt;</ID>
    <ID>LargeClass:LicenceController.kt$LicenceController</ID>
    <ID>LargeClass:LicenceService.kt$LicenceService</ID>
    <ID>LongMethod:Licence.kt$Licence$fun copy( id: Long = this.id, kind: LicenceKind = this.kind, typeCode: LicenceType = this.typeCode, version: String? = this.version, statusCode: LicenceStatus = this.statusCode, nomsId: String? = this.nomsId, bookingNo: String? = this.bookingNo, bookingId: Long? = this.bookingId, crn: String? = this.crn, pnc: String? = this.pnc, cro: String? = this.cro, prisonCode: String? = this.prisonCode, prisonDescription: String? = this.prisonDescription, prisonTelephone: String? = this.prisonTelephone, forename: String? = this.forename, middleNames: String? = this.middleNames, surname: String? = this.surname, dateOfBirth: LocalDate? = this.dateOfBirth, conditionalReleaseDate: LocalDate? = this.conditionalReleaseDate, actualReleaseDate: LocalDate? = this.actualReleaseDate, sentenceStartDate: LocalDate? = this.sentenceStartDate, sentenceEndDate: LocalDate? = this.sentenceEndDate, licenceStartDate: LocalDate? = this.licenceStartDate, licenceExpiryDate: LocalDate? = this.licenceExpiryDate, licenceActivatedDate: LocalDateTime? = this.licenceActivatedDate, topupSupervisionStartDate: LocalDate? = this.topupSupervisionStartDate, topupSupervisionExpiryDate: LocalDate? = this.topupSupervisionExpiryDate, probationAreaCode: String? = this.probationAreaCode, probationAreaDescription: String? = this.probationAreaDescription, probationPduCode: String? = this.probationPduCode, probationPduDescription: String? = this.probationPduDescription, probationLauCode: String? = this.probationLauCode, probationLauDescription: String? = this.probationLauDescription, probationTeamCode: String? = this.probationTeamCode, probationTeamDescription: String? = this.probationTeamDescription, appointmentPerson: String? = this.appointmentPerson, appointmentTime: LocalDateTime? = this.appointmentTime, appointmentAddress: String? = this.appointmentAddress, appointmentContact: String? = this.appointmentContact, spoDiscussion: String? = this.spoDiscussion, vloDiscussion: String? = this.vloDiscussion, approvedDate: LocalDateTime? = this.approvedDate, approvedByUsername: String? = this.approvedByUsername, approvedByName: String? = this.approvedByName, supersededDate: LocalDateTime? = this.supersededDate, submittedDate: LocalDateTime? = this.submittedDate, dateCreated: LocalDateTime? = this.dateCreated, dateLastUpdated: LocalDateTime? = this.dateLastUpdated, updatedByUsername: String? = this.updatedByUsername, standardConditions: List&lt;StandardCondition&gt; = this.standardConditions, additionalConditions: List&lt;AdditionalCondition&gt; = this.additionalConditions, bespokeConditions: List&lt;BespokeCondition&gt; = this.bespokeConditions, responsibleCom: CommunityOffenderManager? = this.responsibleCom, submittedBy: CommunityOffenderManager? = this.submittedBy, createdBy: CommunityOffenderManager? = this.createdBy, variationOfId: Long? = this.variationOfId, versionOfId: Long? = this.versionOfId, licenceVersion: String? = this.licenceVersion, ): Licence</ID>
    <ID>LongMethod:Licence.kt$Licence$override fun equals(other: Any?): Boolean</ID>
    <ID>LongMethod:Licence.kt$Licence$override fun hashCode(): Int</ID>
    <ID>LongMethod:Licence.kt$Licence$override fun toString(): String</ID>
    <ID>LongMethod:LicenceService.kt$LicenceService$@Transactional fun updateLicenceStatus(licenceId: Long, request: StatusUpdateRequest)</ID>
    <ID>LongMethod:LicenceService.kt$LicenceService$private fun copyLicenceAndConditions(kind: LicenceKind, licence: EntityLicence): EntityLicence</ID>
    <ID>LongMethod:ToModelTransformers.kt$fun transform( licence: EntityLicence, earliestReleaseDate: LocalDate?, isEligibleForEarlyRelease: Boolean, ): ModelLicence</ID>
    <ID>LongParameterList:ComService.kt$ComService$( private val communityOffenderManagerRepository: CommunityOffenderManagerRepository, private val licenceRepository: LicenceRepository, private val communityApiClient: CommunityApiClient, private val probationSearchApiClient: ProbationSearchApiClient, private val prisonerSearchApiClient: PrisonerSearchApiClient, private val prisonApiClient: PrisonApiClient, private val eligibilityService: EligibilityService, )</ID>
    <ID>LongParameterList:Licence.kt$Licence$( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @NotNull val id: Long = -1, @NotNull @Enumerated(STRING) val kind: LicenceKind, @NotNull @Enumerated(STRING) val typeCode: LicenceType = AP, var version: String? = null, @NotNull @Enumerated(STRING) var statusCode: LicenceStatus = IN_PROGRESS, val nomsId: String? = null, val bookingNo: String? = null, val bookingId: Long? = null, val crn: String? = null, val pnc: String? = null, val cro: String? = null, val prisonCode: String? = null, val prisonDescription: String? = null, val prisonTelephone: String? = null, val forename: String? = null, val middleNames: String? = null, val surname: String? = null, val dateOfBirth: LocalDate? = null, val conditionalReleaseDate: LocalDate? = null, val actualReleaseDate: LocalDate? = null, val sentenceStartDate: LocalDate? = null, val sentenceEndDate: LocalDate? = null, val licenceStartDate: LocalDate? = null, val licenceExpiryDate: LocalDate? = null, val licenceActivatedDate: LocalDateTime? = null, val topupSupervisionStartDate: LocalDate? = null, val topupSupervisionExpiryDate: LocalDate? = null, val probationAreaCode: String? = null, val probationAreaDescription: String? = null, val probationPduCode: String? = null, val probationPduDescription: String? = null, val probationLauCode: String? = null, val probationLauDescription: String? = null, val probationTeamCode: String? = null, val probationTeamDescription: String? = null, val appointmentPerson: String? = null, val appointmentTime: LocalDateTime? = null, val appointmentAddress: String? = null, val appointmentContact: String? = null, val spoDiscussion: String? = null, val vloDiscussion: String? = null, val approvedDate: LocalDateTime? = null, val approvedByUsername: String? = null, val approvedByName: String? = null, val supersededDate: LocalDateTime? = null, val submittedDate: LocalDateTime? = null, var dateCreated: LocalDateTime? = null, val dateLastUpdated: LocalDateTime? = null, var updatedByUsername: String? = null, @OneToMany( mappedBy = "licence", fetch = FetchType.LAZY, cascade = [CascadeType.ALL], orphanRemoval = true, targetEntity = StandardCondition::class, ) @Fetch(value = FetchMode.SUBSELECT) @OrderBy("conditionSequence") var standardConditions: List&lt;StandardCondition&gt; = emptyList(), @OneToMany(mappedBy = "licence", fetch = FetchType.LAZY, cascade = [CascadeType.ALL], orphanRemoval = true) @Fetch(value = FetchMode.SUBSELECT) @OrderBy("conditionSequence") val additionalConditions: List&lt;AdditionalCondition&gt; = emptyList(), @OneToMany(mappedBy = "licence", fetch = FetchType.LAZY, cascade = [CascadeType.ALL], orphanRemoval = true) @Fetch(value = FetchMode.SUBSELECT) @OrderBy("conditionSequence") val bespokeConditions: List&lt;BespokeCondition&gt; = emptyList(), @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "responsible_com_id", nullable = false) var responsibleCom: CommunityOffenderManager? = null, @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "submitted_by_com_id", nullable = true) var submittedBy: CommunityOffenderManager? = null, @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "created_by_com_id", nullable = false) var createdBy: CommunityOffenderManager? = null, var variationOfId: Long? = null, var versionOfId: Long? = null, var licenceVersion: String? = "1.0", )</ID>
    <ID>LongParameterList:Licence.kt$Licence$( id: Long = this.id, kind: LicenceKind = this.kind, typeCode: LicenceType = this.typeCode, version: String? = this.version, statusCode: LicenceStatus = this.statusCode, nomsId: String? = this.nomsId, bookingNo: String? = this.bookingNo, bookingId: Long? = this.bookingId, crn: String? = this.crn, pnc: String? = this.pnc, cro: String? = this.cro, prisonCode: String? = this.prisonCode, prisonDescription: String? = this.prisonDescription, prisonTelephone: String? = this.prisonTelephone, forename: String? = this.forename, middleNames: String? = this.middleNames, surname: String? = this.surname, dateOfBirth: LocalDate? = this.dateOfBirth, conditionalReleaseDate: LocalDate? = this.conditionalReleaseDate, actualReleaseDate: LocalDate? = this.actualReleaseDate, sentenceStartDate: LocalDate? = this.sentenceStartDate, sentenceEndDate: LocalDate? = this.sentenceEndDate, licenceStartDate: LocalDate? = this.licenceStartDate, licenceExpiryDate: LocalDate? = this.licenceExpiryDate, licenceActivatedDate: LocalDateTime? = this.licenceActivatedDate, topupSupervisionStartDate: LocalDate? = this.topupSupervisionStartDate, topupSupervisionExpiryDate: LocalDate? = this.topupSupervisionExpiryDate, probationAreaCode: String? = this.probationAreaCode, probationAreaDescription: String? = this.probationAreaDescription, probationPduCode: String? = this.probationPduCode, probationPduDescription: String? = this.probationPduDescription, probationLauCode: String? = this.probationLauCode, probationLauDescription: String? = this.probationLauDescription, probationTeamCode: String? = this.probationTeamCode, probationTeamDescription: String? = this.probationTeamDescription, appointmentPerson: String? = this.appointmentPerson, appointmentTime: LocalDateTime? = this.appointmentTime, appointmentAddress: String? = this.appointmentAddress, appointmentContact: String? = this.appointmentContact, spoDiscussion: String? = this.spoDiscussion, vloDiscussion: String? = this.vloDiscussion, approvedDate: LocalDateTime? = this.approvedDate, approvedByUsername: String? = this.approvedByUsername, approvedByName: String? = this.approvedByName, supersededDate: LocalDateTime? = this.supersededDate, submittedDate: LocalDateTime? = this.submittedDate, dateCreated: LocalDateTime? = this.dateCreated, dateLastUpdated: LocalDateTime? = this.dateLastUpdated, updatedByUsername: String? = this.updatedByUsername, standardConditions: List&lt;StandardCondition&gt; = this.standardConditions, additionalConditions: List&lt;AdditionalCondition&gt; = this.additionalConditions, bespokeConditions: List&lt;BespokeCondition&gt; = this.bespokeConditions, responsibleCom: CommunityOffenderManager? = this.responsibleCom, submittedBy: CommunityOffenderManager? = this.submittedBy, createdBy: CommunityOffenderManager? = this.createdBy, variationOfId: Long? = this.variationOfId, versionOfId: Long? = this.versionOfId, licenceVersion: String? = this.licenceVersion, )</ID>
    <ID>LongParameterList:LicenceConditionService.kt$LicenceConditionService$( private val licenceRepository: LicenceRepository, private val additionalConditionRepository: AdditionalConditionRepository, private val bespokeConditionRepository: BespokeConditionRepository, private val additionalConditionUploadDetailRepository: AdditionalConditionUploadDetailRepository, private val conditionFormatter: ConditionFormatter, private val licencePolicyService: LicencePolicyService, private val auditService: AuditService, )</ID>
    <ID>LongParameterList:LicenceService.kt$LicenceService$( private val licenceRepository: LicenceRepository, private val communityOffenderManagerRepository: CommunityOffenderManagerRepository, private val standardConditionRepository: StandardConditionRepository, private val additionalConditionRepository: AdditionalConditionRepository, private val bespokeConditionRepository: BespokeConditionRepository, private val licenceEventRepository: LicenceEventRepository, private val licencePolicyService: LicencePolicyService, private val additionalConditionUploadDetailRepository: AdditionalConditionUploadDetailRepository, private val auditEventRepository: AuditEventRepository, private val notifyService: NotifyService, private val omuService: OmuService, private val releaseDateService: ReleaseDateService, )</ID>
    <ID>LongParameterList:NotifyService.kt$NotifyService$( @Value("\${notify.enabled}") private val enabled: Boolean, @Value("\${self.link}") private val selfLink: String, @Value("\${notify.templates.variationForApproval}") private val variationForApprovalTemplateId: String, @Value("\${notify.templates.variationReApproval}") private val variationForReApprovalTemplateId: String, @Value("\${notify.templates.initialLicencePrompt}") private val initialLicencePromptTemplateId: String, @Value("\${notify.templates.urgentLicencePrompt}") private val urgentLicencePromptTemplateId: String, @Value("\${notify.templates.datesChanged}") private val datesChangedTemplateId: String, @Value("\${notify.templates.variationApproved}") private val variationApprovedTemplateId: String, @Value("\${notify.templates.variationReferred}") private val variationReferredTemplateId: String, @Value("\${notify.templates.unapprovedLicence}") private val unapprovedLicenceByCrdTemplateId: String, @Value("\${internalEmailAddress}") private val internalEmailAddress: String, private val client: NotificationClient, private val releaseDateService: ReleaseDateService, )</ID>
    <ID>LongParameterList:NotifyService.kt$NotifyService$( creatorEmail: String, creatorName: String, comEmail: String, comName: String, popName: String, licenceId: String, )</ID>
    <ID>LongParameterList:NotifyService.kt$NotifyService$( licenceId: String, emailAddress: String?, comFullName: String, offenderFullName: String, crn: String?, datesChanged: Map&lt;String, Boolean&gt;, )</ID>
    <ID>LongParameterList:NotifyService.kt$NotifyService$(notifyRequest: NotifyRequest, licenceId: String, firstName: String, lastName: String, crn: String, comName: String)</ID>
    <ID>LongParameterList:WebClientConfiguration.kt$WebClientConfiguration$( @Value("\${hmpps.auth.url}") private val oauthApiUrl: String, @Value("\${hmpps.prison.api.url}") private val prisonApiUrl: String, @Value("\${hmpps.prisonregister.api.url}") private val prisonRegisterApiUrl: String, @Value("\${hmpps.community.api.url}") private val communityApiUrl: String, @Value("\${hmpps.probationsearch.api.url}") private val probationSearchApiUrl: String, @Value("\${hmpps.prisonersearch.api.url}") private val prisonerSearchApiUrl: String, @Value("\${hmpps.govuk.api.url}") private val govUkApiUrl: String, )</ID>
    <ID>MagicNumber:EligibilityService.kt$EligibilityService$4</ID>
    <ID>MagicNumber:ExclusionZoneService.kt$ExclusionZoneService$100</ID>
    <ID>MagicNumber:ExclusionZoneService.kt$ExclusionZoneService$50</ID>
    <ID>MagicNumber:ExclusionZoneService.kt$ExclusionZoneService$500</ID>
    <ID>MagicNumber:LicenceActivationService.kt$LicenceActivationService$4</ID>
    <ID>MagicNumber:LicenceService.kt$LicenceService$14L</ID>
    <ID>MagicNumber:ProbationSearchApiClient.kt$ProbationSearchApiClient$2000</ID>
    <ID>MatchingDeclarationName:EventSpecifications.kt$EventQueryObject</ID>
    <ID>MatchingDeclarationName:LicenceFunctions.kt$SentenceChanges</ID>
    <ID>MatchingDeclarationName:LicenceSpecifications.kt$LicenceQueryObject</ID>
    <ID>ReturnCount:ComService.kt$ComService$@Transactional fun updateComDetails(comDetails: UpdateComRequest): CommunityOffenderManager</ID>
    <ID>ReturnCount:ExclusionZoneService.kt$ExclusionZoneService$fun createThumbnailImageJpeg(fullSizeImage: ByteArray?, width: Int = 150, height: Int = 200): ByteArray?</ID>
    <ID>SpreadOperator:CreateAndVaryALicenceApi.kt$(*args)</ID>
    <ID>SwallowedException:EventService.kt$EventService$e: PropertyReferenceException</ID>
    <ID>TooManyFunctions:AuditService.kt$AuditService</ID>
    <ID>TooManyFunctions:ComService.kt$ComService</ID>
    <ID>TooManyFunctions:JPASpecificationDSL.kt$uk.gov.justice.digital.hmpps.createandvaryalicenceapi.kotlinjpaspecificationdsl.JPASpecificationDSL.kt</ID>
    <ID>TooManyFunctions:LicenceConditionService.kt$LicenceConditionService</ID>
    <ID>TooManyFunctions:LicenceController.kt$LicenceController</ID>
    <ID>TooManyFunctions:LicenceService.kt$LicenceService</ID>
    <ID>TooManyFunctions:ToModelTransformers.kt$uk.gov.justice.digital.hmpps.createandvaryalicenceapi.service.ToModelTransformers.kt</ID>
    <ID>TooManyFunctions:ToModelTransformers.kt$uk.gov.justice.digital.hmpps.createandvaryalicenceapi.service.publicApi.ToModelTransformers.kt</ID>
    <ID>UnusedParameter:LicenceController.kt$LicenceController$@PathVariable conditionType: String</ID>
    <ID>UtilityClassWithPublicConstructor:Tags.kt$Tags</ID>
    <ID>WildcardImport:LicenceService.kt$import uk.gov.justice.digital.hmpps.createandvaryalicenceapi.util.LicenceKind.*</ID>
  </CurrentIssues>
</SmellBaseline>
